import './bootstrap.js';
import './js/custome.js';
import './js/offline-manager.js';
import './js/local-storage-manager.js';
import './js/indexeddb-manager.js';
import './js/cache-optimizer.js';
/*
 * Welcome to your app's main JavaScript file!
 *
 * This file will be included onto the page via the importmap() Twig function,
 * which should already be in your base.html.twig.
 */
import './styles/app.css';
import './styles/sass/app.scss';

console.log('This log comes from assets/app.js - welcome to AssetMapper! üéâ');

// Variables globales pour la gestion de l'installation PWA
let deferredPrompt;
let installBanner = null;

// Fonction pour d√©tecter si l'appareil est mobile
function isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

// Fonction pour d√©tecter iOS Safari
function isIOSSafari() {
    const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const safari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    return iOS && safari;
}

// Fonction pour v√©rifier si l'app est d√©j√† install√©e
function isAppInstalled() {
    return window.matchMedia('(display-mode: standalone)').matches ||
        window.navigator.standalone === true;
}

// V√©rifier si le navigateur supporte les notifications et Service Workers
if ("serviceWorker" in navigator && "Notification" in window) {
    console.log("üì¢ Service Worker d√©tect√© !");
    
    // N'enregistrer le Service Worker que sur mobile
    if (isMobileDevice()) {
        navigator.serviceWorker.register("/service-worker.js")
            .then(registration => {
                registration.update();
                console.log("‚úÖ Service Worker enregistr√© :", registration);
                demanderPermissionNotification();

                // G√©rer l'installation PWA apr√®s l'enregistrement du service worker
                setTimeout(() => {
                    gererInstallationPWA();
                }, 2000); // Attendre 2 secondes pour que tout soit initialis√©
            })
            .catch(error => console.error("‚ùå Erreur d'enregistrement du Service Worker :", error));
    } else {
        console.log("‚ÑπÔ∏è Service Worker non enregistr√© car appareil desktop d√©tect√©");
    }
} else {
    console.warn("üö® Notifications ou Service Workers non support√©s sur ce navigateur.");
}

// Demande de permission pour les notifications
function demanderPermissionNotification() {
    if (Notification.permission === "granted") {
        envoyerNotification();
    } else if (Notification.permission === "denied") {
        alert("‚ùå Notifications bloqu√©es ! Active-les dans les param√®tres du navigateur.");
    } else {
        Notification.requestPermission().then(permission => {
            if (permission === "granted") {
                envoyerNotification();
            } else {
                console.warn("‚ö†Ô∏è L'utilisateur a refus√© les notifications.");
            }
        });
    }
}

// Fonction pour envoyer une notification
function envoyerNotification() {
    if ("serviceWorker" in navigator) {
        navigator.serviceWorker.ready.then(registration => {
            registration.showNotification("üîî Notification Active !", {
                body: "le notification depuis l'application steamtech est activ√©üéâ",
                icon: "assets/icons/icon-192x192.png", // Remplace avec une vraie ic√¥ne
                vibrate: [200, 100, 200],
                tag: "test-notification"
            });
        }).catch(error => console.error("‚ùå Erreur lors de l'affichage de la notification :", error));
    }
} 

// V√©rifier le support de 'windowControlsOverlay'
if ('windowControlsOverlay' in navigator) {
    console.log("Windows Control Overlay activ√©");

    navigator.windowControlsOverlay.addEventListener("geometrychange", (event) => {
        console.log("Taille de l'overlay :", event.bounds);
    });
} else {
    console.warn("üö® Windows Control Overlay non support√©.");
}

// ==================== GESTION INSTALLATION PWA ====================

// √âcouter l'√©v√©nement beforeinstallprompt
window.addEventListener('beforeinstallprompt', (e) => {
    console.log('üì± √âv√©nement beforeinstallprompt captur√©');
    // Emp√™cher la banni√®re automatique du navigateur
    e.preventDefault();
    // Stocker l'√©v√©nement pour l'utiliser plus tard
    deferredPrompt = e;
});

// Fonction principale de gestion de l'installation PWA
function gererInstallationPWA() {
    // Ne pas afficher si l'app est d√©j√† install√©e
    if (isAppInstalled()) {
        console.log('‚úÖ PWA d√©j√† install√©e');
        return;
    }

    console.log('üîç V√©rification des conditions d\'installation PWA...');

    // V√©rifier si on doit montrer la banni√®re d'installation
    const shouldShowBanner = localStorage.getItem('pwa-install-dismissed') !== 'true';

    if (shouldShowBanner && isMobileDevice()) {
        // D√©lai avant d'afficher la banni√®re pour ne pas √™tre intrusif
        setTimeout(() => {
            afficherBanniereInstallation();
        }, 3000);
    }
}

// Fonction pour cr√©er et afficher la banni√®re d'installation
function afficherBanniereInstallation() {
    // Ne pas cr√©er plusieurs banni√®res
    if (installBanner) return;

    console.log('üì± Affichage de la banni√®re d\'installation PWA');

    // Cr√©er la banni√®re d'installation
    installBanner = document.createElement('div');
    installBanner.id = 'pwa-install-banner';
    installBanner.innerHTML = `
        <div class="pwa-banner-content">
            <div class="pwa-banner-icon">
                <img src="/assets/icons/icon-192x192.png" alt="SteamTec" />
            </div>
            <div class="pwa-banner-text">
                <h4>Installer SteamTec</h4>
                <p>${isIOSSafari() ?
            'Appuie sur <strong>Partager</strong> puis <strong>Sur l\'√©cran d\'accueil</strong>' :
            'Installe l\'app pour un acc√®s rapide hors-ligne'
        }</p>
            </div>
            <div class="pwa-banner-actions">
                ${!isIOSSafari() ? '<button id="pwa-install-btn" class="btn-install">Installer</button>' : ''}
                <button id="pwa-dismiss-btn" class="btn-dismiss">‚úï</button>
            </div>
        </div>
    `;

    // Ajouter la banni√®re au body
    document.body.appendChild(installBanner);

    // Ajouter les √©v√©nements
    const installBtn = document.getElementById('pwa-install-btn');
    const dismissBtn = document.getElementById('pwa-dismiss-btn');

    if (installBtn) {
        installBtn.addEventListener('click', installerPWA);
    }

    dismissBtn.addEventListener('click', fermerBanniere);

    // Auto-fermeture apr√®s 30 secondes
    setTimeout(() => {
        if (installBanner) {
            fermerBanniere();
        }
    }, 30000);
}

// Fonction pour installer la PWA
async function installerPWA() {
    if (!deferredPrompt) {
        console.log('‚ùå Prompt d\'installation non disponible');
        return;
    }

    console.log('üöÄ Installation de la PWA...');

    // Afficher le prompt d'installation
    deferredPrompt.prompt();

    // Attendre la r√©ponse de l'utilisateur
    const choiceResult = await deferredPrompt.userChoice;

    if (choiceResult.outcome === 'accepted') {
        console.log('‚úÖ L\'utilisateur a accept√© l\'installation');
        // Notification de succ√®s
        afficherNotificationInstallation('‚úÖ SteamTec install√© avec succ√®s !', 'success');

        // Marquer comme install√© pour √©viter de redemander
        localStorage.setItem('pwa-installed', 'true');
    } else {
        console.log('‚ùå L\'utilisateur a refus√© l\'installation');
        afficherNotificationInstallation('Installation annul√©e', 'info');
    }

    // Nettoyer
    deferredPrompt = null;
    fermerBanniere();
}

// Fonction pour fermer la banni√®re
function fermerBanniere() {
    if (installBanner) {
        installBanner.style.animation = 'slideOutDown 0.3s ease-in-out';
        setTimeout(() => {
            if (installBanner && installBanner.parentNode) {
                installBanner.parentNode.removeChild(installBanner);
                installBanner = null;
            }
        }, 300);

        // Marquer comme ferm√© pour ne plus afficher pendant cette session
        localStorage.setItem('pwa-install-dismissed', 'true');
    }
}

// Fonction pour afficher une notification d'installation
function afficherNotificationInstallation(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `pwa-notification pwa-notification-${type}`;
    notification.innerHTML = `
        <span>${message}</span>
        <button onclick="this.parentElement.remove()">‚úï</button>
    `;

    document.body.appendChild(notification);

    // Auto-suppression apr√®s 5 secondes
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

// √âcouter les √©v√©nements d'installation
window.addEventListener('appinstalled', (evt) => {
    console.log('üéâ PWA install√©e avec succ√®s !');
    afficherNotificationInstallation('üéâ SteamTec ajout√© √† votre √©cran d\'accueil !', 'success');
    localStorage.setItem('pwa-installed', 'true');
    fermerBanniere();
});

// ==================== FONCTIONS DEBUG PWA (pour d√©veloppement) ====================

// Fonction pour forcer l'affichage de la banni√®re (pour tests)
window.forceShowPWABanner = function () {
    localStorage.removeItem('pwa-install-dismissed');
    localStorage.removeItem('pwa-installed');
    if (installBanner) {
        fermerBanniere();
    }
    setTimeout(() => {
        afficherBanniereInstallation();
    }, 500);
    console.log('üß™ Banni√®re PWA forc√©e (mode debug)');
};

// Fonction pour r√©initialiser l'√©tat d'installation PWA
window.resetPWAState = function () {
    localStorage.removeItem('pwa-install-dismissed');
    localStorage.removeItem('pwa-installed');
    if (installBanner) {
        fermerBanniere();
    }
    console.log('üîÑ √âtat PWA r√©initialis√©');
};

// Fonction pour obtenir l'√©tat actuel de la PWA
window.getPWAStatus = function () {
    const status = {
        isInstalled: isAppInstalled(),
        isMobile: isMobileDevice(),
        isIOSSafari: isIOSSafari(),
        hasDeferredPrompt: !!deferredPrompt,
        installDismissed: localStorage.getItem('pwa-install-dismissed') === 'true',
        markedAsInstalled: localStorage.getItem('pwa-installed') === 'true',
        bannerVisible: !!installBanner
    };
    console.table(status);
    return status;
};

console.log('üõ†Ô∏è Fonctions debug PWA disponibles : forceShowPWABanner(), resetPWAState(), getPWAStatus()');
  
